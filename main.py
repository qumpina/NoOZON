import sqlite3
from datetime import datetime,timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder
import matplotlib.pyplot as plt
import io
import matplotlib.dates as mdates
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    with sqlite3.connect('workout.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            exercise TEXT,
            weight INTEGER,
            date TEXT
        )
        ''')
        conn.commit()


init_db()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (exercise: user_id)
user_state = {}


# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–º–æ—â—å")],
            [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")],
            # [types.KeyboardButton(text="Bench"), types.KeyboardButton(text="Squat"), types.KeyboardButton(text="Deadlift")],
            [types.KeyboardButton(text="–í—Å–µ –∑–∞–ø–∏—Å–∏"), types.KeyboardButton(text="–ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã")],

        ],
        resize_keyboard=True
    )

def get_exercise_kb(with_back=True):
    buttons = [
        [types.KeyboardButton(text="Bench"), types.KeyboardButton(text="Squat"), types.KeyboardButton(text="Deadlift")]
    ]
    if with_back:
        buttons.append([types.KeyboardButton(text="–ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_back_kb():
    return ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_state:
        del user_state[user_id]
    await cmd_help(message)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GymProgressBot!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ —Å–∏–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö.\n\n"
        "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_kb()
    )

@dp.message(F.text == "–ü–æ–º–æ—â—å")
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
    <b>üèãÔ∏è GymProgressBot - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

    <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
    /add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å 
    /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    /progress - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
    /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

    <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>
    –í—Å–µ –∑–∞–ø–∏—Å–∏ - –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    –ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    /delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
    /clear_all - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é

    <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>
    –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    """
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_kb())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
# @dp.message(F.text.in_(["Bench", "Squat", "Deadlift"]))
# async def select_exercise(message: types.Message):
#     user_state[message.from_user.id] = message.text
#     await message.answer(
#         f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥:",
#         reply_markup=types.ReplyKeyboardRemove()
#     )


@dp.message(Command("progress"))
async def cmd_progress(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="progress_1m")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤", callback_data="progress_6m")],
        [InlineKeyboardButton(text="–í—Å–µ –≤—Ä–µ–º—è", callback_data="progress_all")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="progress_back")]
    ])
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "progress_back")
async def progress_back(callback: types.CallbackQuery):
    await callback.message.delete()
    await cmd_help(callback.message)
    await callback.answer()


@dp.callback_query(F.data.startswith("progress_"))
async def show_progress_chart(callback: types.CallbackQuery):
    try:
        period = callback.data.split("_")[1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if period == "1m":
            date_filter = datetime.now() - timedelta(days=30)
            period_name = "1 –º–µ—Å—è—Ü"
        elif period == "6m":
            date_filter = datetime.now() - timedelta(days=180)
            period_name = "6 –º–µ—Å—è—Ü–µ–≤"
        else:  # all
            date_filter = None
            period_name = "–≤—Å–µ –≤—Ä–µ–º—è"

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        with sqlite3.connect('workout.db') as conn:
            cursor = conn.cursor()

            if date_filter:
                cursor.execute('''
                SELECT exercise, date, weight FROM records 
                WHERE user_id = ? AND date >= ?
                ORDER BY date
                ''', (callback.from_user.id, date_filter.strftime("%Y-%m-%d")))
            else:
                cursor.execute('''
                SELECT exercise, date, weight FROM records 
                WHERE user_id = ?
                ORDER BY date
                ''', (callback.from_user.id,))

            records = cursor.fetchall()

        if not records:
            await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        exercises = {}
        dates = []
        for ex, date_str, weight in records:
            date = datetime.strptime(date_str, "%Y-%m-%d").date()
            dates.append(date)

            if ex not in exercises:
                exercises[ex] = {'dates': [], 'weights': []}
            exercises[ex]['dates'].append(date)
            exercises[ex]['weights'].append(weight)

        first_date = min(dates)
        last_date = max(dates)
        total_days = (last_date - first_date).days

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Å–∏ –¥–∞—Ç
        if total_days <= 30:
            days_interval = 7
        elif total_days <= 180:
            days_interval = 14
        else:
            days_interval = 30

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.style.use('seaborn-v0_8')
        plt.figure(figsize=(12, 7))

        # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        for ex, data in exercises.items():
            plt.plot(data['dates'], data['weights'], 'o-', linewidth=2.5, markersize=9, label=ex)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—å –¥–∞—Ç
        ax = plt.gca()
        ax.xaxis.set_major_locator(mdates.DayLocator(interval=days_interval))
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.xticks(rotation=45, ha='right')

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        plt.title(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {period_name}\n({first_date.strftime('%d.%m.%Y')} - {last_date.strftime('%d.%m.%Y')})",
                  fontsize=14, pad=20)
        plt.xlabel("–î–∞—Ç–∞", fontsize=12)
        plt.ylabel("–í–µ—Å (–∫–≥)", fontsize=12)
        plt.legend(prop={'size': 10}, bbox_to_anchor=(1.02, 1), loc='upper left')
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
        buf.seek(0)

        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.answer_photo(
            types.BufferedInputFile(buf.getvalue(), filename="progress.png"),
            caption=f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {period_name} ({len(records)} –∑–∞–ø–∏—Å–µ–π)"
        )

        plt.close()
        buf.close()

    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        await callback.answer()


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
@dp.message(Command("add"))
async def cmd_add(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state[message.from_user.id] = {
        'step': 'select_date',
        'exercise': None,
        'weight': None,
        'date': None
    }

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    kb = [
        [types.KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è")],
        [types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É")],
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    date_kb = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=date_kb
    )


@dp.message(F.text == "–°–µ–≥–æ–¥–Ω—è")
async def process_today_date(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã"""
    user_id = message.from_user.id
    if user_id not in user_state or user_state[user_id]['step'] != 'select_date':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /add", reply_markup=get_main_kb())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    user_state[user_id]['date'] = datetime.now().strftime("%Y-%m-%d")
    user_state[user_id]['step'] = 'select_exercise'

    await message.answer(
        f"‚úÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:",
        reply_markup=get_exercise_kb()
    )


@dp.message(F.text == "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É")
async def process_custom_date_choice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –¥–∞—Ç—ã"""
    user_id = message.from_user.id
    if user_id not in user_state or user_state[user_id]['step'] != 'select_date':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /add", reply_markup=get_main_kb())
        return

    user_state[user_id]['step'] = 'enter_custom_date'
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.2023):",
        reply_markup=get_back_kb()
    )


@dp.message(F.text.regexp(r'^\d{2}\.\d{2}\.\d{4}$'))
async def process_custom_date(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    user_id = message.from_user.id
    if user_id not in user_state or user_state[user_id]['step'] != 'enter_custom_date':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /add", reply_markup=get_main_kb())
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        date_obj = datetime.strptime(message.text, "%d.%m.%Y").date()
        today = datetime.now().date()

        if date_obj > today:
            await message.answer("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:", reply_markup=get_back_kb())
            return

        user_state[user_id]['date'] = date_obj.strftime("%Y-%m-%d")
        user_state[user_id]['step'] = 'select_exercise'

        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ {message.text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:",
            reply_markup=get_exercise_kb()
        )

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=get_back_kb())


@dp.message(F.text.in_(["Bench", "Squat", "Deadlift"]))
async def select_exercise(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    user_id = message.from_user.id
    if user_id not in user_state or user_state[user_id]['step'] != 'select_exercise':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /add", reply_markup=get_main_kb())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    user_state[user_id]['exercise'] = message.text
    user_state[user_id]['step'] = 'enter_weight'

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥:",
        reply_markup=get_back_kb()
    )


@dp.message(F.text.isdigit())
async def handle_weight_input(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_state:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!", reply_markup=get_main_kb())
        return

    state = user_state[user_id]

    # –ò–∑–º–µ–Ω–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º step –≤–º–µ—Å—Ç–æ mode
    if state.get('step') == 'enter_weight':
        try:
            weight = int(message.text)
            if not 1 <= weight <= 1000:
                raise ValueError

            exercise = state['exercise']
            date = state['date']

            with sqlite3.connect('workout.db') as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO records (user_id, exercise, weight, date) VALUES (?, ?, ?, ?)",
                    (user_id, exercise, weight, date)
                )
                conn.commit()

            display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
            await message.answer(
                f"‚úÖ {exercise}: {weight} –∫–≥ –∑–∞ {display_date} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
                reply_markup=get_main_kb()
            )

            del user_state[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (1-1000 –∫–≥)", reply_markup=get_back_kb())
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}", reply_markup=get_main_kb())
            if user_id in user_state:
                del user_state[user_id]
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞", reply_markup=get_main_kb())


@dp.message(F.text == "–í—Å–µ –∑–∞–ø–∏—Å–∏")
@dp.message(Command("all_records"))
async def show_all_records(message: types.Message):
    with sqlite3.connect('workout.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
        SELECT exercise, weight, date FROM records 
        WHERE user_id = ?
        ORDER BY date DESC, exercise
        ''', (message.from_user.id,))

        records = cursor.fetchall()

        if not records:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
            return

        response = "üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        for ex, weight, date in records:
            response += f"{ex}: {weight} –∫–≥ ({date})\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(response) > 4000:
            parts = [response[i:i + 4000] for i in range(0, len(response), 4000)]
            for part in parts:
                await message.answer(part)
        else:
            await message.answer(response)


# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ—Ä–¥—ã (–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è stats)
@dp.message(F.text == "–ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã")
@dp.message(Command("records"))
async def show_records(message: types.Message):
    with sqlite3.connect('workout.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
        SELECT exercise, MAX(weight), date FROM (
            SELECT exercise, weight, MAX(date) as date 
            FROM records 
            WHERE user_id = ?
            GROUP BY exercise, weight
        ) GROUP BY exercise
        ''', (message.from_user.id,))

        records = cursor.fetchall()

        if not records:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤")
            return

        response = "üèÜ –í–∞—à–∏ —Ä–µ–∫–æ—Ä–¥—ã:\n\n"
        for ex, weight, date in records:
            response += f"{ex}: {weight} –∫–≥ (–¥–∞—Ç–∞: {date})\n"

        await message.answer(response)


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
@dp.message(Command("delete"))
async def delete_records_menu(message: types.Message):
    with sqlite3.connect('workout.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
        SELECT id, exercise, weight, date FROM records 
        WHERE user_id = ?
        ORDER BY date DESC
        LIMIT 10
        ''', (message.from_user.id,))

        records = cursor.fetchall()

    if not records:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    builder = InlineKeyboardBuilder()
    for record in records:
        record_id, exercise, weight, date = record
        builder.button(
            text=f"{exercise} {weight}–∫–≥ ({date})",
            callback_data=f"delete_{record_id}"
        )
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("delete_"))
async def delete_record(callback: types.CallbackQuery):
    record_id = int(callback.data.split("_")[1])

    with sqlite3.connect('workout.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT exercise, weight, date FROM records WHERE id = ?', (record_id,))
        record = cursor.fetchone()

        if record:
            exercise, weight, date = record
            cursor.execute('DELETE FROM records WHERE id = ?', (record_id,))
            conn.commit()
            await callback.message.edit_text(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {exercise} {weight} –∫–≥ ({date})",
                reply_markup=None
            )
        else:
            await callback.answer("–ó–∞–ø–∏—Å—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")

    await callback.answer()


@dp.message(Command("clear_all"))
async def clear_all_records(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="confirm_clear")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")

    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏?",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "confirm_clear")
async def confirm_clear(callback: types.CallbackQuery):
    with sqlite3.connect('workout.db') as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM records WHERE user_id = ?', (callback.from_user.id,))
        conn.commit()

    await callback.message.edit_text("–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã", reply_markup=None)
    await callback.answer()


@dp.callback_query(F.data == "cancel_clear")
async def cancel_clear(callback: types.CallbackQuery):
    await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
    await callback.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())